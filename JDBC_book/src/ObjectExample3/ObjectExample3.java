package ObjectExample3;
/*
  ObjectExample3.java shows how to access database objects
  using strongly typed objects of the ProductTyp custom class
  generated by JPublisher (the version of ProductTyp used
  implements SQLData)
*/

import java.math.BigDecimal;
import java.sql.*;
import java.util.Map;

public class ObjectExample3 {

    public static void insertProduct( Connection myConnection ) throws SQLException {

        System.out.println("Inserting a product");

        // step 1: create an object of the ProductTyp custom class
        ProductTyp product = new ProductTyp();

        // step 2: set the attributes of the product object using the
        // various set methods
        product.setId(new BigDecimal(3));
        product.setName("Chips");
        product.setDescription("10 oz bag of chips");
        product.setPrice(new BigDecimal(0.99));
        product.setDaysValid(new BigDecimal(20));

        // step 3: use a prepared statement to insert the
        // product object into the table
        PreparedStatement myPrepStatement = myConnection.prepareStatement( "INSERT INTO object_products VALUES (?)" );
        myPrepStatement.setObject(1, product);
        myPrepStatement.execute();
        myPrepStatement.close();

    } // end of insertProduct()


    public static void displayProducts( Connection myConnection, Statement myStatement ) throws SQLException {

        System.out.println("Products from the object_products table:");

        // step 1: create a result set and use it to select
        // the objects
        ResultSet productResultSet = myStatement.executeQuery( "SELECT VALUE(op) " + "FROM object_products op" );

        // step 2: while there are objects in the result set ...
        while (productResultSet.next()) {

            // a: retrieve each database object from the result set
            // using the getObject() method, casting the returned Object
            // to the ProductTyp custom class
            ProductTyp product = (ProductTyp) productResultSet.getObject(1);

            // b: read the attribute values from the product object
            // using the various get methods
            System.out.println("id = " + product.getId());
            System.out.println("name = " + product.getName());
            System.out.println("description = " + product.getDescription());
            System.out.println("price = " + product.getPrice());
            System.out.println("days valid = " + product.getDaysValid());

            // use a callable statement to call the
            // get_sell_by_date() function
            CallableStatement myCallableStatement = myConnection.prepareCall( "{? = call product_typ.get_sell_by_date(?)}" );
            myCallableStatement.registerOutParameter(1, Types.DATE);
            myCallableStatement.setObject(2, product);
            myCallableStatement.execute();
            System.out.println("sell by date = " + myCallableStatement.getDate(1));
            myCallableStatement.close();

        } // end of while loop

        // step 3: close the result set
        productResultSet.close();

    } // end of displayProducts()


    public static void updateProduct( Connection myConnection, Statement myStatement, int id ) throws SQLException {

        System.out.println("Updating product #" + id + "'s description and price");

        // step 1: create a result set and use it to select
        // the object (in this case, the product with the specified id)
        ResultSet productResultSet = myStatement.executeQuery( "SELECT VALUE(op) FROM object_products op " +
                                                                  "WHERE op.id = " + id
                                                             );
        productResultSet.next();

        // step 2: retrieve the original database object from the result set
        // using the getObject() method, casting the returned Object
        // to the ProductTyp custom class
        ProductTyp product = (ProductTyp) productResultSet.getObject(1);

        // step 3: close the result set
        productResultSet.close();

        // step 4: change the attributes in the ProductTyp object using
        // the appropriate set methods (in this case, the description and
        // price attributes are changed using setDescription() and setPrice())
        product.setDescription("25 oz box of sardines");
        product.setPrice(new BigDecimal(3.49));

        // step 5: use a prepared statement to perform the update
        PreparedStatement myPrepStatement = myConnection.prepareStatement( "UPDATE object_products op " +
                                                                            "SET VALUE(op) = ? " +
                                                                            "WHERE op.id = ?"
                                                                          );
        myPrepStatement.setObject(1, product);
        myPrepStatement.setInt(2, id);
        myPrepStatement.execute();
        myPrepStatement.close();

    } // end of updateProduct()


    public static void main(String args[]) throws SQLException, ClassNotFoundException {

        // register the Oracle JDBC drivers
        DriverManager.registerDriver( new oracle.jdbc.OracleDriver() );

        // create a Connection object, and connect to the database
        // as object_user using the Oracle JDBC Thin driver
        Connection myConnection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1523:ORCL",
                                                                "object_user",
                                                                "object_password"
                                                             );

        // disable auto-commit mode
        myConnection.setAutoCommit(false);

        // set the type map
        Map<String, Class<?>> myMap = myConnection.getTypeMap();
        myMap.put("OBJECT_USER.PRODUCT_TYP", Class.forName("ObjectExample3.ProductTyp"));
        myConnection.setTypeMap(myMap);

        // create a Statement object
        Statement myStatement = myConnection.createStatement();

        // display the products in the object_products table
        displayProducts(myConnection, myStatement);

        // insert a product
        insertProduct(myConnection);

        // update product #2's description and price attributes
        updateProduct(myConnection, myStatement, 2);

        // display the products
        displayProducts(myConnection, myStatement);

        // rollback the changes made to the database
        myConnection.rollback();

        // close the Statement and Connection objects
        myStatement.close();
        myConnection.close();

    } // end of main()

}