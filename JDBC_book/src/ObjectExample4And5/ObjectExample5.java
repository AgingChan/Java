package ObjectExample4And5;
/*
  ObjectExample5.java shows how to access object references using
  strongly typed objects of the ProductTypRef and PersonTypRef
  classes generated by JPublisher (these classes implement ORAData
  and ORADataFactory)
*/

// import the required packages

import java.sql.*;

import oracle.jdbc.OracleResultSet;
import oracle.jdbc.OraclePreparedStatement;

import java.math.BigDecimal;

public class ObjectExample5 {

    public static void displayPurchase(
            Connection myConnection,
            Statement myStatement
    ) throws SQLException {

        System.out.println("Purchase from the purchases table:");

        // step 1: create a result set and select the object
        // references from the REF columns
        ResultSet purchaseResultSet = myStatement.executeQuery(
                "SELECT customer, product " +
                        "FROM purchases"
        );
        purchaseResultSet.next();

        // step 2: retrieve the object references from the result set
        // using the getORAData() method
        PersonTypRef customerRef =
                (PersonTypRef) ((OracleResultSet) purchaseResultSet).getORAData(
                        1, PersonTypRef.getORADataFactory()
                );
        ProductTypRef productRef =
                (ProductTypRef) ((OracleResultSet) purchaseResultSet).getORAData(
                        2, ProductTypRef.getORADataFactory()
                );

        // step 3: close the result set
        purchaseResultSet.close();

        // step 4: retrieve the actual objects from the references using
        // the getValue() method
        PersonTyp2 customer = customerRef.getValue();
        ProductTyp product = productRef.getValue();

        // read the attribute values from the product object using the
        // get methods
        System.out.println("Product:");
        System.out.println("id = " + product.getId());
        System.out.println("price = " + product.getPrice());
        System.out.println("name = " + product.getName());
        System.out.println("description = " + product.getDescription());
        System.out.println("days_valid = " + product.getDaysValid());

        // read the attribute values from the customer object using the
        // get methods
        System.out.println("Customer:");
        System.out.println("id = " + customer.getId());
        System.out.println("first_name = " + customer.getFirstName());
        System.out.println("last_name = " + customer.getLastName());
        System.out.println("dob = " + customer.getDob());
        System.out.println("phone = " + customer.getPhone());

        // get the customer address
        AddressTyp address = (AddressTyp) customer.getAddress();
        System.out.println("street = " + address.getStreet());
        System.out.println("city = " + address.getCity());
        System.out.println("state = " + address.getState());
        System.out.println("zip = " + address.getZip());

    } // end of displayPurchase()


    public static void updateProduct(
            Connection myConnection,
            Statement myStatement,
            int productId
    ) throws SQLException {

        System.out.println("Updating product #" + productId +
                "'s description and price");

        // step 1: create a result set and use it to select
        // the object reference
        ResultSet productResultSet = myStatement.executeQuery(
                "SELECT REF(op) " +
                        "FROM object_products op " +
                        "WHERE op.id = " + productId
        );
        productResultSet.next();

        // step 2: retrieve the object reference from the result set
        // using the getORAData() method, storing it in a
        // ProductTypRef object
        ProductTypRef productRef =
                (ProductTypRef) ((OracleResultSet) productResultSet).getORAData(
                        1, ProductTypRef.getORADataFactory()
                );

        // step 3: close the result set
        productResultSet.close();

        // step 4: retrieve the object from the object reference using
        // the getValue() method
        ProductTyp product = (ProductTyp) productRef.getValue();

        // step 5: change the object attributes using the set methods
        product.setDescription("25 oz box of sardines");
        product.setPrice(new BigDecimal(3.49));

        // step 6: update the object in the database using the setValue()
        // method
        productRef.setValue(product);

    } // end of updateProduct()


    public static void updateProductPurchased(
            Connection myConnection,
            Statement myStatement,
            int purchaseId,
            int productId
    ) throws SQLException {

        System.out.println("Updating purchase #" + purchaseId +
                " with product #" + productId);

        // step 1: create a result set and use it to
        // select the new object reference
        ResultSet productResultSet = myStatement.executeQuery(
                "SELECT REF(op) " +
                        "FROM object_products op " +
                        "WHERE op.id = " + productId
        );
        productResultSet.next();

        // step 2: retrieve the object reference from the result set
        // using the getORAData() method, storing it in a
        // ProductTypRef object
        ProductTypRef productRef =
                (ProductTypRef) ((OracleResultSet) productResultSet).getORAData(
                        1, ProductTypRef.getORADataFactory()
                );

        // step 3: close the result set
        productResultSet.close();

        // step 4: use a prepared statement to perform the update of
        // the existing object reference stored in the REF column with the
        // new object reference
        PreparedStatement myPrepStatement = myConnection.prepareStatement(
                "UPDATE purchases " +
                        "SET product = ? " +
                        "WHERE id = ?"
        );
        ((OraclePreparedStatement) myPrepStatement).setORAData(
                1, productRef
        );
        myPrepStatement.setInt(2, purchaseId);
        myPrepStatement.execute();
        myPrepStatement.close();

    } // end of updateProductPurchased()


    public static void main(String args[])
            throws SQLException {

        // register the Oracle JDBC drivers
        DriverManager.registerDriver(
                new oracle.jdbc.OracleDriver()
        );

        // create a Connection object, and connect to the database
        // as object_user using the Oracle JDBC Thin driver
        Connection myConnection = DriverManager.getConnection(
                "jdbc:oracle:thin:@localhost:1523:ORCL",
                "object_user",
                "object_password"
        );

        // disable auto-commit mode
        myConnection.setAutoCommit(false);

        // create a Statement object
        Statement myStatement = myConnection.createStatement();

        // display the purchases
        displayPurchase(myConnection, myStatement);

        // update product #2's description and price attributes
        updateProduct(myConnection, myStatement, 2);

        // update purchase #1 to reference product #2
        updateProductPurchased(myConnection, myStatement, 1, 2);

        // display the purchases
        displayPurchase(myConnection, myStatement);

        // rollback the changes made to the database
        myConnection.rollback();

        // close the Statement and Connection objects
        myStatement.close();
        myConnection.close();

    } // end of main()

}