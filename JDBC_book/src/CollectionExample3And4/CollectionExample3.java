package CollectionExample3And4;
/*
  CollectionExample3.java shows how to access varrays
  using using strongly typed objects of the VarrayAddressTyp
  custom class generated by JPublisher
*/

// import the required packages

import oracle.jdbc.OraclePreparedStatement;
import oracle.jdbc.OracleResultSet;

import java.sql.*;

public class CollectionExample3 {

    public static void insertCustomer(Connection myConnection) throws SQLException {

        System.out.println("Inserting a customer into customers_with_varray");

        // step 1: create an array to store the elements for the
        // collection
        String[] addresses = {" Main Street, Uptown, NY, 55512", "2 Side Street, Beantown, MA, 12345"};

        // step 2: create an object of the VarrayAddressTyp custom class
        VarrayAddressTyp varrayAddress = new VarrayAddressTyp(addresses);

        // step 3: use a prepared statement to insert the object
        // into the table, along with the other columns required
        // for the new row
        PreparedStatement myPrepStatement = myConnection.prepareStatement(
                "INSERT INTO customers_with_varray VALUES (?, ?, ?, ?)"
        );
        myPrepStatement.setInt(1, 2);
        myPrepStatement.setString(2, "Cynthia");
        myPrepStatement.setString(3, "Green");
        ((OraclePreparedStatement) myPrepStatement).setORAData(4, varrayAddress);
        myPrepStatement.execute();
        myPrepStatement.close();

    } // end of insertCustomer()


    public static void displayCustomers(Connection myConnection, Statement myStatement) throws SQLException {

        System.out.println("Customers from customers_with_varray:");

        // step 1: create a result set and use it to select
        // the rows from customers_with_varray
        ResultSet customerResultSet = myStatement.executeQuery("SELECT id, first_name, last_name, addresses " +
                "FROM customers_with_varray"
        );

        // step 2: while there are rows in the result set ...
        while (customerResultSet.next()) {

            System.out.println("id = " + customerResultSet.getInt("id"));
            System.out.println("first_name = " + customerResultSet.getString("first_name"));
            System.out.println("last_name = " + customerResultSet.getString("last_name"));

            // a: retrieve the collection from the result set using the
            // getORAData() method, casting the returned ORAData object
            // to the VarrayAddressTyp custom class
            VarrayAddressTyp varrayAddress = (VarrayAddressTyp)
                    ((OracleResultSet) customerResultSet).getORAData("addresses", VarrayAddressTyp.getORADataFactory());

            // b: retrieve the element values from the object using the
            // getArray() method, storing the element values in a
            // string array
            String[] addresses = (String[]) varrayAddress.getArray();

            // c: read the element values from the string array
            for (int count = 0; count < addresses.length; count++) {
                System.out.println("addresses[" + count + "] = " + addresses[count]);
            }

        } // end of while loop

        // step 3: close the result set
        customerResultSet.close();

    } // end of displayCustomers()


    public static void updateCustomerAddress(Connection myConnection, Statement myStatement, int id) throws SQLException {

        System.out.println("Updating customer #" + id + "'s first address");

        // step 1: create a result set and use it to select
        // the collection (in this case, the addresses for a customer
        // with the specified id)
        ResultSet customerResultSet = myStatement.executeQuery("SELECT addresses " +
                "FROM customers_with_varray " +
                "WHERE id = " + id
        );
        customerResultSet.next();

        // step 2: retrieve the original collection from the
        // result set using the getORAData() method, casting the
        // returned ORAData object to VarrayAddressTyp and storing it
        VarrayAddressTyp varrayAddress = (VarrayAddressTyp)
                ((OracleResultSet) customerResultSet).getORAData("addresses", VarrayAddressTyp.getORADataFactory());

        // step 3: close the result set
        customerResultSet.close();

        // step 4: retrieve the first element from varrayAddress using
        // the getElement() method and then modify it using the setElement()
        // method
        varrayAddress.getElement(0);
        varrayAddress.setElement("3 New Street, Middle Town, CA, 12345", 0);

        // step 5: use a prepared statement to perform the update
        PreparedStatement myPrepStatement = myConnection.prepareStatement("UPDATE customers_with_varray " +
                "SET addresses = ? " +
                "WHERE id = ?"
        );
        ((OraclePreparedStatement) myPrepStatement).setORAData(1, varrayAddress);
        myPrepStatement.setInt(2, id);
        myPrepStatement.execute();
        myPrepStatement.close();

    } // end of updateCustomerAddress()


    public static void main(String args[]) throws SQLException {

        // register the Oracle JDBC drivers
        DriverManager.registerDriver(new oracle.jdbc.OracleDriver());

        // create a Connection object, and connect to the database
        // as collection_user using the Oracle JDBC Thin driver
        Connection myConnection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1523:ORCL",
                "collection_user",
                "collection_password"
        );

        // disable auto-commit mode
        myConnection.setAutoCommit(false);

        // create a Statement object
        Statement myStatement = myConnection.createStatement();

        // display the customers in the customers_with_varray table
        displayCustomers(myConnection, myStatement);

        // insert a customer
        insertCustomer(myConnection);

        // update customer #1's address
        updateCustomerAddress(myConnection, myStatement, 1);

        // display the customers
        displayCustomers(myConnection, myStatement);

        // rollback the changes made to the database
        myConnection.rollback();

        // close the Statement and Connection objects
        myStatement.close();
        myConnection.close();

    } // end of main()

}