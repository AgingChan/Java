package CollectionExample3And4;
/*
  CollectionExample4.java shows how to access VARRAYs
  using using strongly typed objects of the NestedTableAddressTyp
  class generated by JPublisher
*/

// import the required packages

import java.sql.*;

import oracle.jdbc.OraclePreparedStatement;
import oracle.jdbc.OracleResultSet;

public class CollectionExample4 {

    private static NestedTableAddressTyp nestedTableAddress;
    private static  ResultSet customerResultSet;

    private static void insertCustomer(Connection myConnection) throws SQLException {

        System.out.println("Inserting a customer into customers_with_nested_table");

        // step 1: create an array to store the elements for the
        // collection
        AddressTyp[] addresses = new AddressTyp[2];
        addresses[0] = new AddressTyp();
        addresses[0].setStreet("1 Main Street");
        addresses[0].setCity("Uptown");
        addresses[0].setState("NY");
        addresses[0].setZip("55512");
        addresses[1] = new AddressTyp();
        addresses[1].setStreet("2 Side Street");
        addresses[1].setCity("Beantown");
        addresses[1].setState("MA");
        addresses[1].setZip("12345");

        // step 2: create an object of the NestedTableAddressTyp custom class
        NestedTableAddressTyp nestedTableAddress = new NestedTableAddressTyp(addresses);

        // step 3: use a prepared statement to insert the object
        // into the table
        PreparedStatement myPrepStatement = myConnection.prepareStatement("INSERT INTO customers_with_nested_table VALUES (?, ?, ?, ?)");
        myPrepStatement.setInt(1, 2);
        myPrepStatement.setString(2, "Cynthia");
        myPrepStatement.setString(3, "Green");
        ((OraclePreparedStatement) myPrepStatement).setORAData(4, nestedTableAddress);
        myPrepStatement.execute();
        myPrepStatement.close();

    } // end of insertCustomer()


    private static void displayCustomers(Statement myStatement) throws SQLException {

        System.out.println("Customers from customers_with_nested_table:");

        // step 1: create a result set and use it to select
        // the rows from customers_with_varray
        customerResultSet = myStatement.executeQuery("SELECT id, first_name, last_name, addresses " +
                                                     "FROM customers_with_nested_table"
                                                    );


        // step 2: while there are rows in the result set ...
        while (customerResultSet.next()) {

            System.out.println("id = " + customerResultSet.getInt("id"));
            System.out.println("first_name = " + customerResultSet.getString("first_name"));
            System.out.println("last_name = " + customerResultSet.getString("last_name"));

            // a: retrieve the collection from the result set using the
            // getORAData() method, casting the returned ORAData object
            // to the NestedTableAddressTyp custom class
            nestedTableAddress = (NestedTableAddressTyp)((OracleResultSet) customerResultSet).getORAData("addresses",
                                                                            NestedTableAddressTyp.getORADataFactory()
                                                                                                        );

            // b: retrieve the element values from the object using the
            // getArray() method, storing the element values in an
            // AddressTyp array
            AddressTyp[] addresses = (AddressTyp[]) nestedTableAddress.getArray();

            // c: read the element values from the string array
            for (int count = 0; count < addresses.length; count++) {
                System.out.println("addresses[" + count + "].getStreet() = " + addresses[count].getStreet());
                System.out.println("addresses[" + count + "].getCity() = " + addresses[count].getCity());
                System.out.println("addresses[" + count + "].getState() = " + addresses[count].getState());
                System.out.println("addresses[" + count + "].getZip() = " + addresses[count].getZip());
            }

        } // end of while loop

        // step 3: close the result set
        customerResultSet.close();

    } // end of displayCustomers()


    private static void updateCustomerAddress(Connection myConnection, Statement myStatement, int id) throws SQLException {

        System.out.println("Updating customer #" + id + "'s first address");

        // step 1: create a result set and use it to select
        // the collection (in this case, the addresses for a customer
        // with the specified id)
        customerResultSet = myStatement.executeQuery("SELECT addresses FROM customers_with_nested_table " +
                                                                "WHERE id = " + id
                                                              );
        customerResultSet.next();

        // step 2: retrieve the original collection from the
        // result set using the getORAData() method, casting the
        // returned ORAData object to NestedTableAddressTyp and storing it
        nestedTableAddress = (NestedTableAddressTyp) ((OracleResultSet) customerResultSet).getORAData("addresses",
                                                                                NestedTableAddressTyp.getORADataFactory()
                                                                                                      );

        // step 3: close the result set
        customerResultSet.close();

        // step 4: retrieve the first element from varrayAddress using
        // the getElement() method
        AddressTyp oldAddress = nestedTableAddress.getElement(0);

        // create a new AddressTyp object and set the attributes
        AddressTyp newAddress = new AddressTyp();
        newAddress.setStreet("3 New Street");
        newAddress.setCity("Middle Town");
        newAddress.setState("CA");
        newAddress.setZip("12345");

        // step 5: use a prepared statement to perform the update
        PreparedStatement myPrepStatement = myConnection.prepareStatement("UPDATE TABLE (" +
                                                                        "  SELECT addresses FROM customers_with_nested_table " +
                                                                        "  WHERE id = ? " +
                                                                        ") a " +
                                                                        "SET VALUE(a) = ? " +
                                                                        "WHERE VALUE(a) = ?"
                                                                        );
        myPrepStatement.setInt(1, id);
        ((OraclePreparedStatement) myPrepStatement).setORAData(2, newAddress);
        ((OraclePreparedStatement) myPrepStatement).setORAData(3, oldAddress);
        myPrepStatement.execute();
        myPrepStatement.close();

    } // end of updateCustomerAddress()


    public static void main(String args[]) throws SQLException {

        // register the Oracle JDBC drivers
        DriverManager.registerDriver(new oracle.jdbc.OracleDriver());

        // create a Connection object, and connect to the database
        // as collection_user using the Oracle JDBC Thin driver
        Connection myConnection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1523:ORCL",
                                                               "collection_user",
                                                               "collection_password"
                                                             );

        // disable auto-commit mode
        myConnection.setAutoCommit(false);

        // create a Statement object
        Statement myStatement = myConnection.createStatement();

        // display the customers
        displayCustomers(myStatement);

        // insert a customer
        insertCustomer(myConnection);

        // update customer #1's address
        updateCustomerAddress(myConnection, myStatement, 1);

        // display the customers
        displayCustomers(myStatement);

        // rollback the changes made to the database
        myConnection.rollback();

        // close the Statement and Connection objects
        myStatement.close();
        myConnection.close();

    } // end of main()

}